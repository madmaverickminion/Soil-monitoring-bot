// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/02/2022 13:59:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          path_planning
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module path_planning_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50;
reg [31:0] start_node;
// wires                                               

// assign statements (if any)                          
path_planning i1 (
// port map - connection between master ports and signals/registers   
	.clk_50(clk_50),
	.start_node(start_node)
);
initial 
begin 
#1000000 $finish;
end 

// clk_50
always
begin
	clk_50 = 1'b0;
	clk_50 = #5000 1'b1;
	#5000;
end 
// start_node[ 31 ]
initial
begin
	start_node[31] = 1'b0;
end 
// start_node[ 30 ]
initial
begin
	start_node[30] = 1'b0;
end 
// start_node[ 29 ]
initial
begin
	start_node[29] = 1'b0;
end 
// start_node[ 28 ]
initial
begin
	start_node[28] = 1'b0;
end 
// start_node[ 27 ]
initial
begin
	start_node[27] = 1'b0;
end 
// start_node[ 26 ]
initial
begin
	start_node[26] = 1'b0;
end 
// start_node[ 25 ]
initial
begin
	start_node[25] = 1'b0;
end 
// start_node[ 24 ]
initial
begin
	start_node[24] = 1'b0;
end 
// start_node[ 23 ]
initial
begin
	start_node[23] = 1'b0;
end 
// start_node[ 22 ]
initial
begin
	start_node[22] = 1'b0;
end 
// start_node[ 21 ]
initial
begin
	start_node[21] = 1'b0;
end 
// start_node[ 20 ]
initial
begin
	start_node[20] = 1'b0;
end 
// start_node[ 19 ]
initial
begin
	start_node[19] = 1'b0;
end 
// start_node[ 18 ]
initial
begin
	start_node[18] = 1'b0;
end 
// start_node[ 17 ]
initial
begin
	start_node[17] = 1'b0;
end 
// start_node[ 16 ]
initial
begin
	start_node[16] = 1'b0;
end 
// start_node[ 15 ]
initial
begin
	start_node[15] = 1'b0;
end 
// start_node[ 14 ]
initial
begin
	start_node[14] = 1'b0;
end 
// start_node[ 13 ]
initial
begin
	start_node[13] = 1'b0;
end 
// start_node[ 12 ]
initial
begin
	start_node[12] = 1'b0;
end 
// start_node[ 11 ]
initial
begin
	start_node[11] = 1'b0;
end 
// start_node[ 10 ]
initial
begin
	start_node[10] = 1'b0;
end 
// start_node[ 9 ]
initial
begin
	start_node[9] = 1'b0;
end 
// start_node[ 8 ]
initial
begin
	start_node[8] = 1'b0;
end 
// start_node[ 7 ]
initial
begin
	start_node[7] = 1'b0;
end 
// start_node[ 6 ]
initial
begin
	start_node[6] = 1'b0;
end 
// start_node[ 5 ]
initial
begin
	start_node[5] = 1'b0;
end 
// start_node[ 4 ]
initial
begin
	start_node[4] = 1'b0;
end 
// start_node[ 3 ]
initial
begin
	start_node[3] = 1'b0;
end 
// start_node[ 2 ]
initial
begin
	start_node[2] = 1'b0;
end 
// start_node[ 1 ]
initial
begin
	start_node[1] = 1'b0;
end 
// start_node[ 0 ]
initial
begin
	start_node[0] = 1'b0;
end 
endmodule

